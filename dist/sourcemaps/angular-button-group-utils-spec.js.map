{"version":3,"sources":["angular-button-group-utils-spec.js"],"names":[],"mappings":"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","file":"angular-button-group-utils-spec.js","sourcesContent":["import _ from \"lodash\";\nimport deepFreeze from 'deep-freeze';\n\nimport AngularButtonGroupUtils from \"./angular-button-group-utils\";\n\ndescribe(\"AngularButtonGroupUtils\", () => {\n\n    //------------------------------------------------------------\n    // createButtonsConfig\n    //------------------------------------------------------------\n\n    describe(\"createButtonsConfig\", () => {\n\n        it(\"should retain all config keys\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                },\n                zzz: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                }\n            };\n            let _default_config = {};\n\n            deepFreeze(_config);\n            deepFreeze(_default_config);\n\n            let _result = AngularButtonGroupUtils.createButtonsConfig(_config, _default_config);\n\n            expect(_.keys(_result)).toEqual(_.keys(_config));\n        });\n\n        it(\"should leave certain properties unchanged\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                },\n                zzz: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                }\n            };\n            let _default_config = {};\n\n            deepFreeze(_config);\n            deepFreeze(_default_config);\n\n            let _result = AngularButtonGroupUtils.createButtonsConfig(_config, _default_config);\n\n            expect(_result.xxx.aaa).toEqual(_config.xxx.aaa);\n            expect(_result.zzz.aaa).toEqual(_config.zzz.aaa);\n        });\n\n        it(\"should leave label unchanged if array provided\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA\",\n                    label: [ \"BBB1\", \"BBB2\" ],\n                    button_class: \"CCC\"\n                },\n                zzz: {\n                    aaa: \"AAA\",\n                    label: [ \"BBB3\", \"BBB4\" ],\n                    button_class: \"CCC\"\n                }\n            };\n            let _default_config = {};\n\n            deepFreeze(_config);\n            deepFreeze(_default_config);\n\n            let _result = AngularButtonGroupUtils.createButtonsConfig(_config, _default_config);\n\n            expect(_result.xxx.label).toEqual(_config.xxx.label);\n            expect(_result.zzz.label).toEqual(_config.zzz.label);\n        });\n\n        it(\"should leave button_class unchanged if array provided\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: [ \"CCC1\", \"CCC2\" ]\n                },\n                zzz: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: [ \"CCC3\", \"CCC4\" ]\n                }\n            };\n            let _default_config = {};\n\n            deepFreeze(_config);\n            deepFreeze(_default_config);\n\n            let _result = AngularButtonGroupUtils.createButtonsConfig(_config, _default_config);\n\n            expect(_result.xxx.button_class).toEqual(_config.xxx.button_class);\n            expect(_result.zzz.button_class).toEqual(_config.zzz.button_class);\n        });\n\n        it(\"should convert label to array is array is not provided\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                },\n                zzz: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                }\n            };\n            let _default_config = {};\n\n            deepFreeze(_config);\n            deepFreeze(_default_config);\n\n            let _result = AngularButtonGroupUtils.createButtonsConfig(_config, _default_config);\n\n            expect(_.isArray(_result.xxx.label)).toBe(true);\n        });\n\n        it(\"should convert label to array is array is not provided\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                },\n                zzz: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                }\n            };\n            let _default_config = {};\n\n            deepFreeze(_config);\n            deepFreeze(_default_config);\n\n            let _result = AngularButtonGroupUtils.createButtonsConfig(_config, _default_config);\n\n            expect(_.isArray(_result.xxx.button_class)).toBe(true);\n        });\n\n    });\n\n    //------------------------------------------------------------\n    // createButtonsConfig\n    //------------------------------------------------------------\n\n    describe(\"updateButtonsConfigProperty\", () => {\n\n        it(\"should correctly update provided property for a items \", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA1\",\n                    bbb: \"BBB1\"\n                },\n                zzz: {\n                    aaa: \"AAA2\",\n                    bbb: \"BBB2\"\n                },\n                vvv: {\n                    aaa: \"AAA3\",\n                    bbb: \"BBB3\"\n                }\n            };\n            let _property = \"bbb\";\n            let _value = 123;\n            let _exclude = [];\n\n            deepFreeze(_config);\n            deepFreeze(_exclude);\n\n            let _result = AngularButtonGroupUtils.updateButtonsConfigProperty(_config, _property, _value, _exclude);\n\n            expect(_result.xxx.aaa).toEqual(\"AAA1\");\n            expect(_result.xxx[ _property ]).toEqual(_value);\n\n            expect(_result.zzz.aaa).toEqual(_config.zzz.aaa);\n            expect(_result.zzz[ _property ]).toEqual(_value);\n\n            expect(_result.vvv.aaa).toEqual(_config.vvv.aaa);\n            expect(_result.vvv[ _property ]).toEqual(_value);\n        });\n\n        it(\"should exclude items in provided array\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA1\",\n                    bbb: \"BBB1\"\n                },\n                zzz: {\n                    aaa: \"AAA2\",\n                    bbb: \"BBB2\"\n                },\n                vvv: {\n                    aaa: \"AAA3\",\n                    bbb: \"BBB3\"\n                }\n            };\n            let _property = \"bbb\";\n            let _value = 123;\n            let _exclude = [ \"zzz\" ];\n\n            deepFreeze(_config);\n            deepFreeze(_exclude);\n\n            let _result = AngularButtonGroupUtils.updateButtonsConfigProperty(_config, _property, _value, _exclude);\n\n            expect(_result.xxx.aaa).toEqual(\"AAA1\");\n            expect(_result.xxx[ _property ]).toEqual(_value);\n\n            expect(_result.zzz.aaa).toEqual(_config.zzz.aaa);\n            expect(_result.zzz[ _property ]).toEqual(_config.zzz[ _property ]);\n\n            expect(_result.vvv.aaa).toEqual(_config.vvv.aaa);\n            expect(_result.vvv[ _property ]).toEqual(_value);\n        });\n\n    });\n});"],"sourceRoot":"src/app/*.js"}