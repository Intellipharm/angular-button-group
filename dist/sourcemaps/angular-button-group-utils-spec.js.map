{"version":3,"sources":["angular-button-group-utils-spec.js"],"names":["describe","it","_config","xxx","aaa","label","button_class","zzz","_default_config","_result","createButtonsConfig","expect","keys","toEqual","isArray","toBe","bbb","vvv","_property","_value","_exclude","updateButtonsConfigProperty"],"mappings":"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","file":"angular-button-group-utils-spec.js","sourcesContent":["import _ from \"lodash\";\nimport deepFreeze from 'deep-freeze';\n\nimport AngularButtonGroupUtils from \"./angular-button-group-utils\";\n\ndescribe(\"AngularButtonGroupUtils\", () => {\n\n    //------------------------------------------------------------\n    // createButtonsConfig\n    //------------------------------------------------------------\n\n    describe(\"createButtonsConfig\", () => {\n\n        it(\"should retain all config keys\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                },\n                zzz: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                }\n            };\n            let _default_config = {};\n\n            deepFreeze(_config);\n            deepFreeze(_default_config);\n\n            let _result = AngularButtonGroupUtils.createButtonsConfig(_config, _default_config);\n\n            expect(_.keys(_result)).toEqual(_.keys(_config));\n        });\n\n        it(\"should leave certain properties unchanged\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                },\n                zzz: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                }\n            };\n            let _default_config = {};\n\n            deepFreeze(_config);\n            deepFreeze(_default_config);\n\n            let _result = AngularButtonGroupUtils.createButtonsConfig(_config, _default_config);\n\n            expect(_result.xxx.aaa).toEqual(_config.xxx.aaa);\n            expect(_result.zzz.aaa).toEqual(_config.zzz.aaa);\n        });\n\n        it(\"should leave label unchanged if array provided\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA\",\n                    label: [ \"BBB1\", \"BBB2\" ],\n                    button_class: \"CCC\"\n                },\n                zzz: {\n                    aaa: \"AAA\",\n                    label: [ \"BBB3\", \"BBB4\" ],\n                    button_class: \"CCC\"\n                }\n            };\n            let _default_config = {};\n\n            deepFreeze(_config);\n            deepFreeze(_default_config);\n\n            let _result = AngularButtonGroupUtils.createButtonsConfig(_config, _default_config);\n\n            expect(_result.xxx.label).toEqual(_config.xxx.label);\n            expect(_result.zzz.label).toEqual(_config.zzz.label);\n        });\n\n        it(\"should leave button_class unchanged if array provided\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: [ \"CCC1\", \"CCC2\" ]\n                },\n                zzz: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: [ \"CCC3\", \"CCC4\" ]\n                }\n            };\n            let _default_config = {};\n\n            deepFreeze(_config);\n            deepFreeze(_default_config);\n\n            let _result = AngularButtonGroupUtils.createButtonsConfig(_config, _default_config);\n\n            expect(_result.xxx.button_class).toEqual(_config.xxx.button_class);\n            expect(_result.zzz.button_class).toEqual(_config.zzz.button_class);\n        });\n\n        it(\"should convert label to array is array is not provided\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                },\n                zzz: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                }\n            };\n            let _default_config = {};\n\n            deepFreeze(_config);\n            deepFreeze(_default_config);\n\n            let _result = AngularButtonGroupUtils.createButtonsConfig(_config, _default_config);\n\n            expect(_.isArray(_result.xxx.label)).toBe(true);\n        });\n\n        it(\"should convert label to array is array is not provided\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                },\n                zzz: {\n                    aaa: \"AAA\",\n                    label: \"BBB\",\n                    button_class: \"CCC\"\n                }\n            };\n            let _default_config = {};\n\n            deepFreeze(_config);\n            deepFreeze(_default_config);\n\n            let _result = AngularButtonGroupUtils.createButtonsConfig(_config, _default_config);\n\n            expect(_.isArray(_result.xxx.button_class)).toBe(true);\n        });\n\n    });\n\n    //------------------------------------------------------------\n    // createButtonsConfig\n    //------------------------------------------------------------\n\n    describe(\"updateButtonsConfigProperty\", () => {\n\n        it(\"should correctly update provided property for a items \", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA1\",\n                    bbb: \"BBB1\"\n                },\n                zzz: {\n                    aaa: \"AAA2\",\n                    bbb: \"BBB2\"\n                },\n                vvv: {\n                    aaa: \"AAA3\",\n                    bbb: \"BBB3\"\n                }\n            };\n            let _property = \"bbb\";\n            let _value = 123;\n            let _exclude = [];\n\n            deepFreeze(_config);\n            deepFreeze(_exclude);\n\n            let _result = AngularButtonGroupUtils.updateButtonsConfigProperty(_config, _property, _value, _exclude);\n\n            expect(_result.xxx.aaa).toEqual(\"AAA1\");\n            expect(_result.xxx[ _property ]).toEqual(_value);\n\n            expect(_result.zzz.aaa).toEqual(_config.zzz.aaa);\n            expect(_result.zzz[ _property ]).toEqual(_value);\n\n            expect(_result.vvv.aaa).toEqual(_config.vvv.aaa);\n            expect(_result.vvv[ _property ]).toEqual(_value);\n        });\n\n        it(\"should exclude items in provided array\", () => {\n\n            let _config = {\n                xxx: {\n                    aaa: \"AAA1\",\n                    bbb: \"BBB1\"\n                },\n                zzz: {\n                    aaa: \"AAA2\",\n                    bbb: \"BBB2\"\n                },\n                vvv: {\n                    aaa: \"AAA3\",\n                    bbb: \"BBB3\"\n                }\n            };\n            let _property = \"bbb\";\n            let _value = 123;\n            let _exclude = [ \"zzz\" ];\n\n            deepFreeze(_config);\n            deepFreeze(_exclude);\n\n            let _result = AngularButtonGroupUtils.updateButtonsConfigProperty(_config, _property, _value, _exclude);\n\n            expect(_result.xxx.aaa).toEqual(\"AAA1\");\n            expect(_result.xxx[ _property ]).toEqual(_value);\n\n            expect(_result.zzz.aaa).toEqual(_config.zzz.aaa);\n            expect(_result.zzz[ _property ]).toEqual(_config.zzz[ _property ]);\n\n            expect(_result.vvv.aaa).toEqual(_config.vvv.aaa);\n            expect(_result.vvv[ _property ]).toEqual(_value);\n        });\n\n    });\n});"],"sourceRoot":"src/app/*.js"}