{"version":3,"sources":["angular-button-group-controller.js"],"names":["AngularButtonGroupController","$s","show_confirm_group","api","reset","bind","buttons","default_config","busy_confirming","button_class","button_class_index","callback","confirm","confirm_group_class","confirm_label_class","confirm_message","confirm_no_label","confirm_no_button_class","confirm_yes_label","confirm_yes_button_class","disable_others","disabled","label","label_index","visible","$watch","val","_","isUndefined","has","buttons_config","createButtonsConfig","button_key","_is_confirmed","_config","Object","assign","length","_exclude","updateButtonsConfigProperty","isNull","config","$inject"],"mappings":"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","file":"angular-button-group-controller.js","sourcesContent":["import AngularButtonGroupUtils from \"./angular-button-group-utils\";\n\n/**\n * Class AngularButtonGroupController\n */\nexport default class AngularButtonGroupController {\n\n    constructor($s) {\n\n        this.$s = $s;\n\n        this.show_confirm_group = false;\n        this.api = $s.api || {};\n\n        this.api.reset = this.reset.bind(this);\n\n        this.buttons = {};\n\n        // defaults\n\n        this.default_config = {\n            busy_confirming: false, // control\n            button_class: [],\n            button_class_index: 0,\n            callback: null,\n            confirm: false,\n            confirm_group_class: \"\",\n            confirm_label_class: \"\",\n            confirm_message: null,\n            confirm_no_label: \"NO\",\n            confirm_no_button_class: \"\",\n            confirm_yes_label: \"YES\",\n            confirm_yes_button_class: \"\",\n            disable_others: false,\n            disabled: false, // control\n            label: [],\n            label_index: 0,\n            show_confirm_group: false, // control\n            visible: true\n        };\n\n        //--------------------------------------------------------\n        // watchers\n        //--------------------------------------------------------\n\n        $s.$watch('AngularButtonGroup.config', (val) => {\n\n            if (_.isUndefined(val)) {\n                return;\n            }\n\n            // reset\n            if (!_.has(val, 'reset') && val.reset) {\n                val.reset = false;\n            }\n\n            // create buttons config\n            this.buttons_config = AngularButtonGroupUtils.createButtonsConfig(val, this.default_config);\n\n        }, true);\n    }\n\n    ////////////////////////////////////////////////\n    //\n    // handlers\n    //\n    ////////////////////////////////////////////////\n\n    /**\n     * onClick\n     *\n     * @param {string} button_key\n     */\n    onClick(button_key) {\n\n        let _is_confirmed = null;\n        let _config = Object.assign({}, this.buttons_config[ button_key ]);\n\n        // enable\n        _config.disabled = false;\n\n        // if multiple labels then cycle\n        if (_config.label.length > 1) {\n            if (++_config.label_index === _config.label.length) {\n                _config.label_index = 0;\n            }\n        }\n\n        // if multiple classes then cycle\n        if (_config.button_class.length > 1) {\n            if (++_config.button_class_index === _config.button_class.length) {\n                _config.button_class_index = 0;\n            }\n        }\n\n        // stop others that are confirming\n        let _exclude = [ button_key ];\n        this.buttons_config = AngularButtonGroupUtils.updateButtonsConfigProperty(this.buttons_config, \"show_confirm_group\", false, _exclude);\n\n        // disable others?\n        if (_config.disable_others) {\n            _exclude = [ button_key ];\n            this.buttons_config = AngularButtonGroupUtils.updateButtonsConfigProperty(this.buttons_config, \"disabled\", true, _exclude);\n        }\n\n        // requires confirmation?\n        if (_config.confirm) {\n            _config.busy_confirming = true;\n            _config.show_confirm_group = true;\n        }\n\n        // update this button's config\n        this.buttons_config[ button_key ] = _config;\n\n        // external handler\n        if (!_.isNull(_config.callback)) {\n            _config.callback(_config, _config.busy_confirming, _is_confirmed);\n        }\n    }\n\n    /**\n     * onYesClick\n     *\n     * @param {string} button_key\n     */\n    onYesClick(button_key) {\n\n        let _is_confirmed = true;\n        let _config = Object.assign({}, this.buttons_config[ button_key ]);\n\n        _config.show_confirm_group = false;\n        _config.busy_confirming = false;\n\n        // disable others?\n        if (_config.disable_others) {\n            let _exclude = [ button_key ];\n            this.buttons_config = AngularButtonGroupUtils.updateButtonsConfigProperty(this.buttons_config, \"disabled\", false, _exclude);\n        }\n\n        // update this button's config\n        this.buttons_config[ button_key ] = _config;\n\n        // external handler\n        if (!_.isNull(_config.callback)) {\n            _config.callback(_config, _config.busy_confirming, _is_confirmed);\n        }\n    }\n\n    /**\n     * onNoClick\n     *\n     * @param {string} button_key\n     */\n    onNoClick(button_key) {\n\n        let _is_confirmed = false;\n        let _config = Object.assign({}, this.buttons_config[ button_key ]);\n\n        // disable others?\n        if (_config.disable_others) {\n            let _exclude = [ button_key ];\n            this.buttons_config = AngularButtonGroupUtils.updateButtonsConfigProperty(this.buttons_config, \"disabled\", false, _exclude);\n        }\n\n        _config.show_confirm_group = false;\n        _config.busy_confirming = false;\n\n        // update this button's config\n        this.buttons_config[ button_key ] = _config;\n\n        // external handler\n        if (!_.isNull(_config.callback)) {\n            _config.callback(_config, _config.busy_confirming, _is_confirmed);\n        }\n    }\n\n    ////////////////////////////////////////////////\n    //\n    // utils\n    //\n    ////////////////////////////////////////////////\n\n    /**\n     * reset\n     */\n    reset() {\n        // recreate initial buttons config\n        this.buttons_config = AngularButtonGroupUtils.createButtonsConfig(this.config, this.default_config);\n    }\n}\n\nAngularButtonGroupController.$inject = ['$scope'];\n"],"sourceRoot":"src/app/*.js"}