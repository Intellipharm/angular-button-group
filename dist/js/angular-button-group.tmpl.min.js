!function(){"use strict";angular.module("AngularButtonGroup",[])}(),angular.module("AngularButtonGroup",[]).run(["$templateCache",function(n){n.put("html/angular-button-group.html",'<div class="angular-button-group" ng-show="is_visible"><div ng-repeat="button in config" class="group" ng-class="{\'disabled\': button.disabled}" ng-show="button.visible"><div ng-show="!button.show_confirm_group"><button ng-class="button.button_class[button.button_class_index]" ng-click="ctrl.onClick(button)">{{button.label[button.label_index]}}</button></div><div ng-show="button.show_confirm_group"><div ng-class="button.confirm_label_class" ng-show="button.confirm_message">{{button.confirm_message}}</div><div ng-class="button.confirm_group_class"><button ng-class="button.confirm_yes_button_class" ng-click="ctrl.onYesClick(button)">{{button.confirm_yes_label}}</button> <button ng-class="button.confirm_no_button_class" ng-click="ctrl.onNoClick(button)">{{button.confirm_no_label}}</button></div></div></div></div>')}]),function(){"use strict";var n=function(n){this.api=n.api||{},this.show_confirm_group=!1,this.onClick=function(o){o.disabled=!1,o.label.length>1&&++o.label_index===o.label.length&&(o.label_index=0),o.button_class.length>1&&++o.button_class_index===o.button_class.length&&(o.button_class_index=0),_.forEach(n.config,function(n,t){n!==o&&(n.show_confirm_group=!1)}),o.disable_others&&_.forEach(n.config,function(n,t){n!==o&&(n.disabled=!0)}),o.confirm&&(o.busy_confirming=!0,o.show_confirm_group=!0),_.isNull(o.callback)||o.callback(o,o.busy_confirming)},this.onYesClick=function(o){o.show_confirm_group=!1,o.busy_confirming=!1,o.disable_others&&_.forEach(n.config,function(n,t){n!==o&&(n.disabled=!1)}),_.isNull(o.callback)||o.callback(o,!1,!0)},this.onNoClick=function(o){o.disable_others&&_.forEach(n.config,function(n,t){n!==o&&(n.disabled=!1)}),o.show_confirm_group=!1,o.busy_confirming=!1,_.isNull(o.callback)||o.callback(o,!1,!1)},this.api.reset=function(){_.forEach(n.config,function(n,o){n.show_confirm_group=!1,n.busy_confirming=!1,n.disabled=!1})}};n.$inject=["$scope"],angular.module("AngularButtonGroup").controller("AngularButtonGroupCtrl",n)}(),function(){"use strict";var n=function(){return{restrict:"EA",scope:{is_visible:"=isVisible",config:"=",api:"="},controller:"AngularButtonGroupCtrl as ctrl",link:function(n,o,t,l){var i={button_class:[],button_class_index:0,busy_confirming:!1,label:[],label_index:0,callback:null,confirm:!1,confirm_group_class:"",confirm_label_class:"",confirm_message:null,confirm_no_label:"NO",confirm_no_button_class:"",confirm_yes_label:"YES",confirm_yes_button_class:"",disable_others:!1,visible:!0};n.$watch("config",function(n){if(!_.isUndefined(n)){if(!_.has(n,"reset")&&n.reset)return console.log("reset"),n.reset=!1,l.reset(),!0;_.forEach(n,function(n,o,t){_.isArray(n.label)||(n.label=[n.label]),_.isArray(n.button_class)||(n.button_class=[n.button_class]),t[o]=_.merge(_.clone(i,!0),n)})}},!0),n.$watch("reset",function(o){_.isUndefined(o)||o&&(n.reset=!1,l.reset())},!0)},replace:!0,templateUrl:"html/angular-button-group.html"}};n.$inject=[],angular.module("AngularButtonGroup").directive("angularButtonGroup",n)}(),function(){"use strict";angular.module("AngularButtonGroup").constant("ANGULAR_BUTTON_GROUP_CLASS","aaa")}();
//# sourceMappingURL=data:application/json;base64,